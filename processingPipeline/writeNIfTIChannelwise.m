function writeNIfTIChannelwise(name, settings, data, Channel)
% Write data per channel to disk as NIfTI file
%
% As complex data cannot really be handled by neuroimaging tools we
% transform the 3D image into a 4D time series. The real part will
% be the first time points according to the number of channels, the
% imaginary the next time points.
% This way transforms (e.g. generated by ANTs) can be applied to
% the dataset. Afterwards the split complex number can be merged
% again.
%
% ************************************************************************
% Version 1.0                                                  15.02.2019
% Falk Luesebrink              falk dot luesebrink at med dot ovgu dot de
% ************************************************************************
data = ifftshift(ifftshift(ifftshift(ifft(ifft(ifft(fftshift(fftshift(fftshift(data,1),2),3),[],1),[],2),[],3),1),2),3);

data = permute(data, [2 1 3]);
data = data(end:-1:1,end:-1:1,:);

% Create NIfTI file
nii=make_nii(data, settings.parameters.Resolution, [], 16);

% Set NIfTI magic number
nii.hdr.hist.magic = 'n+1';

% Set unit of voxel spacing to mm
nii.hdr.dime.xyzt_units = 2;

% Change type of orientation method (qform: quanternion based; sform:
% affine transformation). Compare nifti header information for information
% on different methods.
nii.hdr.hist.qform_code = 1; % Method 2: qform
% data.hdr.hist.sform_code = 1; % Method 3: sform

% Quaternion (Method 2)
nii.hdr.hist.quatern_b =    settings.parameters.Quaternion(1,3);
nii.hdr.hist.quatern_c = -1*settings.parameters.Quaternion(1,2);
nii.hdr.hist.quatern_d = -1*settings.parameters.Quaternion(1,1);
nii.hdr.hist.qoffset_x = 0; %settings.parameters.FoV(3)/2; %-1*(settings.parameters.Pos(1)+settings.parameters.FoV(3)/2);
nii.hdr.hist.qoffset_y = 0; %settings.parameters.FoV(2)/2; %   (settings.parameters.Pos(2)+settings.parameters.FoV(2)/2);
nii.hdr.hist.qoffset_z = 0; %settings.parameters.FoV(1)/2; %-1*(settings.parameters.Pos(3)+settings.parameters.FoV(1)/2);
nii.hdr.dime.pixdim(1) = -1;

% % Affine transformation part (Method 3)
nii.hdr.hist.srow_x =  settings.parameters.R(1,1:4);
nii.hdr.hist.srow_y =  settings.parameters.R(2,1:4);
nii.hdr.hist.srow_z =  settings.parameters.R(3,1:4);

nii.hdr.dime.datatype = 16;
nii.hdr.dime.bitpix   = 32;

nii.hdr.dime.dim(1) = 4;
nii.hdr.dime.dim(5) = 2;

filename = [name.namePrefix name.nameVol name.nameSession name.nameDecor name.nameDenoise name.nameTukey name.nameSuffix];

nii.img(:,:,:,1) = real(data);
nii.img(:,:,:,2) = imag(data);

save_nii(nii, [name.namePath '/' filename '_complex_Channel_' num2str(Channel) '.nii']);

if settings.options.output.gzip
    nii=[name.namePath '/' filename '_complex_Channel_' num2str(Channel) '.nii'];
    gzip(nii)
    delete(nii)
end